// Copyright 2012 The Plaso Project Authors.
// Please see the AUTHORS file for details on individual authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Kristinn Gudjonsson <kristinn at log2timeline dot net>>

// This is the main protobuf for event storage in plaso.o

syntax = "proto2";

package plaso_storage;

import "plaso/proto/transmission.proto";

// Each EventObject/EventContainer can contain any attribute
// as long as it can be expressed in any of the supported
// formats (eg, string, int, array, dict).
// This can be looked as a hash or a dict object, with a key
// and a value values.
message Attribute {
  // The key to the dict object, something like 'username'.
  required string key = 1;

  // If the value is a string.
  optional string string = 2;
  // If the value is an integer.
  optional int64 integer = 3;
  // If the value is an array.
  optional Array array = 4;
  // If the value is a dictionary.
  optional Dict dict = 5;
  // If the value is a boolean value.
  optional bool boolean = 6;
  // If we have a "raw" byte value.
  optional bytes data = 7;
  // If we have a "float" value.
  optional float float = 8;
  // If there is a None value (happens).
  optional bool none = 9;
};

// A list of of Attributes, to build up a dictionary.
message Dict {
  repeated Attribute attributes = 1;
};

// A value, used for lists or arrays.
message Value {
  optional int64 integer = 1;
  optional string string = 2;
  optional bytes data = 3;
  optional Array array = 4;
  optional Dict dict = 5;
  optional bool boolean = 6;
  optional float float = 7;
  optional bool none = 8;
};

// A list of values, either integers or strings, to make up an array.
message Array {
  repeated Value values = 1;
};

// Each event read by the tool is stored as an EventObject,
// an EventObject contains certain fixed sets of attributes
// and it can also store any additional attributes.
// This message stores the main attributes inside the each record
// instead of nesting them possibly deep down.
message EventObject {
  // The timestamp is presented as a 64 bit Unix Epoch time,
  // stored in UTC.
  optional int64 timestamp = 1;

  // A short description of the meaning of the timestamp.
  // This could be something as 'File Written', 'Last Written',
  // 'Page Visited', 'File Downloaded', or something like that.
  optional string timestamp_desc = 2;

  // The type of the event data stored in the attributes.
  required string data_type = 3;

  // A list of all the stored attributes within the event.
  repeated Attribute attributes = 4;

  // The timezone of the source where the timestamp came from.
  optional string timezone = 5;

  // The filename from where the event was extracted from.
  optional string filename = 6;
  optional string display_name = 7;

  // The full PathSpec where the file was extracted from.
  optional transmission.PathSpec pathspec = 8;

  // The offset into the original file from where the event came from.
  optional int64 offset = 9;

  // Information about where this object is stored, added by the storage
  // library to make it easier to quickly recover the EventObject from
  // the storage file.
  optional int64 store_number = 10;
  optional int64 store_index = 11;

  // EventTagging is a message that can be added that include information
  // about coloring, tagging or comments that this object contains.
  optional EventTagging tag = 12;

  // Description of the origin of the event in generic terms that
  // mostly adhere to the definition of the TLN format.
  // TODO: Remove this field from the EventObject message.
  enum SourceShort {
    AV = 1; // All Anti-Virus engine log files.
    BACK = 2; // Information from backup points, eg. restore points, VSS.
    EVT = 3; // EventLog entries, both the EVT format and EVTX.
    EXIF = 4; // EXIF information.
    FILE = 5; // FILE related information, mactime information.
    LOG = 6; // Generic log file, most log files should fit this.
    LNK = 7; // Shortcut or link files.
    LSO = 8; // Flash cookies, or Local Shared Objects.
    META = 9; // Metadata information.
    PLIST = 10; // Information extracted from plist files.
    RAM = 11; // Information extracted from RAM.
    RECBIN = 12; // Recycle bin or deleted items.
    REG = 13; // Registry information.
    WEBHIST = 14; // Browser history.
  }

  // The category or short description of the source.
  // TODO: Remove this field from the EventObject message.
  optional SourceShort source_short = 13;

  // The short description is not sufficient to describe the source
  // of the event. A longer source field is therefore provided to add
  // more context to the source. The source_long field should not be
  // long, two or three words should be sufficient for most parts.
  // The field is not strictly defined, it should just be short and
  // fully descriptive.
  //
  // Example field names are:
  //    Chrome Browser History
  //    Chrome Download History
  //    Recycle Bin
  //    NTUSER.DAT Registry
  //    Sophos AV Log
  // TODO: Remove this field from the EventObject message.
  optional string source_long = 14;
};

// The EventTagging is a simple message that describes comments,
// color information or tagging of EventObjects. This information
// is usually manually added by an investigator and can be used
// to add more context to certain events.
message EventTagging {
  // Description of where the EventObject is stored that this
  // tag is describing. This information is required and can be
  // used to find and read in the EventObject.
  required int64 store_number = 1;
  required int64 store_index = 2;

  // An arbitrary string that contains a comment describing
  // observations the investigator has about this EventObject.
  optional string comment = 3;

  // Color information, used in some front-ends to make this
  // event stand out. This should be either a simple description
  // of the color, eg "red", "yellow", etc or a HTML color code,
  // eg: "#E11414".
  optional string color = 4;

  // A short string or a tag that describes that can be used to
  // group together events that are related to one another, eg
  // "Malware", "Entry Point", "Event of Interest", etc.
  message Tag {
    required string value = 1;
  };

  repeated Tag tags = 5;
};

// The EventGroup is a simple mechanism to describe a group of
// events that belong to the same action or behavior. This is
// a simple mechanism to store this information so a front-end
// can collapse all these events into a single source.
message EventGroup {
  // The name of the EventGroup, what is displayed in the front-end
  // as a substitute for the other events, should be descriptive
  // of the events that are grouped together, as in "USB Drive inserted",
  // or "User Logged On".
  required string name = 1;

  // Optional longer description of the group, giving a more detailed
  // description of what the grouping describes or why these events
  // were grouped together.
  optional string description = 2;

  // If these events contain a timestamp it can be beneficial to
  // include the timerange of events this group spans. That time range
  // can be described by the first and last timestamp that is contained
  // within the group.
  optional int64 first_timestamp = 3;
  optional int64 last_timestamp = 4;

  // Optional color information that can be used in the front-end
  // to give color information about the group. This can be described
  // as a simple color, eg: "red", "orange", "green" or as a HTML
  // color code, eg "#E11414".
  optional string color = 5;

  // If this group of events falls into a specific category it can
  // be included here, eg: "User Behavior", "Malware Related", etc.
  optional string category = 6;

  // Information about which EventObjects are included in this group.
  // The information is stored in an attribute called EventDescription
  // that simply defines where the EventObjects are stored so they can
  // be easily identified and recovered.
  message EventDescription {
    // Description of where these events are stored within the storage
    // file.
    required int64 store_number = 1;
    required int64 store_index = 2;
  };

  repeated EventDescription events = 7;
};

// The EventContainer is a simple container that serves as a storage
// to other EventContainers and EventObjects.
// The EventContainer can store common attributes that are shared
// with each EventObjects stored within it.
message EventContainer {
  // The timestamp of the earliest EventObject that is stored within
  // the container. It can be used to filter out entire containers
  // or for first version of the sorting.
  // The timestamp is stored as a 64 bit Unix Epoch time in UTC.
  required int64 first_time = 1;

  // The time of the last EventObject stored within the container.
  // The timestamp is stored as a 64 bit Unix Epoch time in UTC.
  required int64 last_time = 2;

  // A list of the EventContainers stored within this container.
  repeated EventContainer containers = 4;

  // A list of the EventObjects that are stored within this container.
  repeated EventObject events = 6;

  // A list of the attributes that are stored within this container.
  repeated Attribute attributes = 8;
};

// The PreProcess protobuf is a simple message that stores information
// gathered from the pre-processing stage of plaso.
message PreProcess {
  // Storing information about the runtime of the tool.
  optional Dict collection_information = 1;

  // A dict that contains information about counters stored within the
  // the store.
  optional Dict counter = 2;

  // A list value that depicts the range of store numbers this particular
  // PreProcess message applies to.
  optional Array store_range = 3;

  // All attributes that each preprocessing module produces gets stored
  // inside this field.
  repeated Attribute attributes = 4;
};
