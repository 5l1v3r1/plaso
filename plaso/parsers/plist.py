#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Copyright 2013 The Plaso Project Authors.
# Please see the AUTHORS file for details on individual authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""This file contains the Property List (Plist) Parser.

Plaso's engine calls PlistParser when it encounters Plist files to be processed.
"""

import logging
import os

from binplist import binplist

# Need to import plist to ensure plugins are registered.
# pylint: disable-msg=unused-import
from plaso.parsers import plist_plugins

from plaso.lib import errors
from plaso.lib import parser
from plaso.lib import plugin
from plaso.lib import utils
from plaso.parsers.plist_plugins import interface


class PlistParser(parser.BaseParser):
  """De-serializes and parses plists the event objects are generated by plist.

  The Plaso engine calls parsers by their Parse() method. This parser's
  Parse() has GetTopLevel() which deserializes plist files using the binplist
  library and calls plugins (PlistPlugin) registered through the
  interface by their Process() to yield EventObject objects back
  to the engine.

  Plugins are how this parser understands the content inside a plist file,
  each plugin holds logic specific to a particular plist file. See the
  interface and plist_plugins/ directory for examples of how plist plugins are
  implemented.
  """

  NAME = 'plist'

  def __init__(self, pre_obj, config):
    """Initializes the parser.

    Args:
      pre_obj: pre-parsing object.
      config: configuration object.
    """
    super(PlistParser, self).__init__(pre_obj, config)
    plugin_filter_string = getattr(self._config, 'parsers', None)
    self._plugins = plugin.GetRegisteredPlugins(
        interface.PlistPlugin, pre_obj, plugin_filter_string)

  def GetTopLevel(self, file_entry):
    """Returns the deserialized content of a plist as a dictionary object.

    Args:
      file_entry: the file entry object.

    Returns:
      A dictionary object representing the contents of the plist.
    """
    file_object = file_entry.Open()
    file_size = file_object.get_size()

    if file_size <= 0:
      raise errors.UnableToParseFile(
          u'[PLIST] file size: {0:d} bytes is less equal 0.'.format(file_size))

    # 50MB is 10x larger than any plist seen to date.
    if file_size > 50000000:
      raise errors.UnableToParseFile(
          u'[PLIST] file size: {0:d} bytes is larger than 50 MB.'.format(
              file_size))

    try:
      bpl = binplist.BinaryPlist(file_object)
      top_level_object = bpl.Parse()
    except binplist.FormatError as e:
      raise errors.UnableToParseFile(
          u'[PLIST] File is not a plist: {0:s}'.format(
              utils.GetUnicodeString(e)))
    except OverflowError as e:
      raise errors.UnableToParseFile(
          u'[PLIST] unable to parse: {0:s} with error: {1:s}'.format(
              file_entry.name, e))

    file_object.close()

    if not bpl:
      raise errors.UnableToParseFile(
          u'[PLIST] File is not a plist: {0:s}'.format(
              utils.GetUnicodeString(e)))

    if bpl.is_corrupt:
      logging.warning(
          u'[PLIST] corruption detected in binary plist: {0:s}'.format(
              file_entry.name))

    return top_level_object

  def Parse(self, file_entry):
    """Parse and extract values from a plist file.

    Args:
      file_entry: the file entry object.

    Yields:
      A plist event object (instance of event.PlistEvent).
    """
    top_level_object = self.GetTopLevel(file_entry)
    if not top_level_object:
      raise errors.UnableToParseFile(
          u'[PLIST] couldn\'t parse: %s.  Skipping.' % file_entry.name)

    plist_name = os.path.basename(file_entry.name)

    for plist_plugin in self._plugins.itervalues():
      try:
        for evt in plist_plugin.Process(plist_name, top_level_object):
          evt.plugin = plist_plugin.plugin_name
          yield evt
      except errors.WrongPlistPlugin as e:
        logging.debug(u'[PLIST] Wrong Plugin:{} for:{}'.format(e[0], e[1]))
